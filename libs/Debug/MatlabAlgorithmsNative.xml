<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatlabAlgorithmsNative</name>
    </assembly>
    <members>
        <member name="T:MatlabAlgorithmsNative.Preprocessing">
            <summary>
            The Preprocessing class provides a CLS compliant, Object (native) interface to the
            MATLAB functions contained in the files:
            <newpara></newpara>
            C:\Users\Grzegorz\Source\Repos\MSI-dev\spectre\src\MATLAB\pafft.m
            <newpara></newpara>
            C:\Users\Grzegorz\Source\Repos\MSI-dev\spectre\src\MATLAB\remove_baseline.m
            <newpara></newpara>
            C:\Users\Grzegorz\Source\Repos\MSI-dev\spectre\src\MATLAB\ticnorm.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.#ctor">
            <summary>
            Constructs a new instance of the Preprocessing class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft">
             <summary>
             Provides a single output, 0-input Objectinterface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="mz">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the pafft MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.pafft(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the pafft function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             PAFFT Wraps adaptive_PAFFT in easy manner.
             aligned = PAFFT(mz, data) returns a matrix with aligned spectra. M/z
             are in columns, observations are in rows, the same as in matrix input
             data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline">
             <summary>
             Provides a single output, 0-input Objectinterface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="mz">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the remove_baseline MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.remove_baseline(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the remove_baseline function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             REMOVE_BASELINE removes baseline from the data
             grounded = REMOVE_BASELINE(mz, data) returns data set where baseline is
             removed, with subsequent m/z in columns and observations in rows.
             Observations order from data matrix is preserved. Matrix data should
             have m/z in columns and observations in rows as well.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm">
             <summary>
             Provides a single output, 0-input Objectinterface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the ticnorm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.ticnorm(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the ticnorm function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             TICNORM performs TIC normalization on dataset
             normalized = TICNORM(data) returns TIC normalized dataset. Columns
             correspond to m/z, rows to observations, same as in matrix data.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Preprocessing.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
        <member name="T:MatlabAlgorithmsNative.Gmm">
            <summary>
            The Gmm class provides a CLS compliant, Object (native) interface to the MATLAB
            functions contained in the files:
            <newpara></newpara>
            C:\Users\Grzegorz\Source\Repos\MSI-dev\spectre\src\MATLAB\apply_gmm.m
            <newpara></newpara>
            C:\Users\Grzegorz\Source\Repos\MSI-dev\spectre\src\MATLAB\estimate_gmm.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.#ctor">
            <summary>
            Constructs a new instance of the Gmm class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm">
             <summary>
             Provides a single output, 0-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="mdl">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apply_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="mz">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apply_gmm MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mdl">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="mz">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.apply_gmm(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apply_gmm function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             APPLY_GMM applies estimated model on data
             modelled = APPLY_GMM(mdl, data) returns data modelled using estimated
             GMM parameters.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm">
             <summary>
             Provides a single output, 0-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="mz">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="merge">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="merge">Input argument #3</param>
             <param name="remove">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="merge">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the estimate_gmm MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="mz">Input argument #1</param>
             <param name="data">Input argument #2</param>
             <param name="merge">Input argument #3</param>
             <param name="remove">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.estimate_gmm(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the estimate_gmm function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             ESTIMATE_GMM Estimates GMM model for given data
             mdl = ESTIMATE_GMM(mz, data) - estimates basic GMM model for dataset
             mdl = ESTIMATE_GMM(mz, data, merge) - allows to specify whether
             components merging should be applied
             mdl = ESTIMATE_GMM(mz, data, merge, remove) - allows to specify whether
             additional shaping components should be removed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Gmm.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
        <member name="T:MatlabAlgorithmsNative.Segmentation">
            <summary>
            The Segmentation class provides a CLS compliant, Object (native) interface to the
            MATLAB functions contained in the files:
            <newpara></newpara>
            C:\Users\Grzegorz\Source\Repos\MSI-dev\spectre\src\MATLAB\DiviK\libs\divik_library\d
            ivik.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.#ctor">
            <summary>
            Constructs a new instance of the Segmentation class.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik">
             <summary>
             Provides a single output, 0-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Object,System.Object,System.Object[])">
             <summary>
             Provides a single output, 3-input Objectinterface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object,System.Object,System.Object[])">
             <summary>
             Provides the standard 3-input Object interface to the divik MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="xy">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.divik(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the divik function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             DIVIK Performs filtering &amp; clustering recursively.
             partition = DIVIK( data, xy )
             [partition, res_struct] = DIVIK( ___ )
             partition = DIVIK( ___, 'Name', 'Value' ) - allows to specify additional
             parameters:
             - MaxK - maximal number of clusters considered (default 10)
             - Level - maximal depth of splitting (default 3)
             - UseLevels - states, whether to use levels of depth or size criterion for
             stop (default true, uses depth of recurence)
             - AmplitudeFiltration - states whether to use filtration of low abundance
             features at top level (default true)
             - VarianceFiltration - states whether to use adaptive filtration of
             non-informative features with respect to variance for every region (default
             true)
             - PercentSizeLimit - the percentage of inital size used for stopping the
             algorithm when size criterion is applied (default 0.001 for 0.1   of initial
             size)
             - FeaturePreservationLimit - the percentage of features preserved for sure
             during filtration procedures (default 0.05 for at least 5   of features\
             preserved)
             - Metric - metric used in clustering (default 'pearson')
             - PlotPartitions - states whether to plot partitions at top level (default
             false)
             - PlotRecursively - states whether to plot partitions at all levels, works
             only if PlotPartitions is set true (default false)
             - DecompositionPlots - states whether to plot decompositions of amplitude
             and variance at top level (default false)
             - DecompositionPlotsRecursively - states whether to make decomposition plots
             at all levels, works only if DecompositionPlots is set true (default false)
             - MaxComponentsForDecomposition - sets the maximal considered number of
             components used for decomposition of amplitude and variance (default 10)
             - OutPath - sets the path to directory where all outputs may be stored
             (default '.')
             - CachePath - sets the path to directory where cache may be stored (default
             '.')
             Cache - enables caching feature (default true)
             Verbose - sets verbosity (default false)
             KmeansOpts - additional options passed to k-means algorithm (see K_MEANS)
             (default {})
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:MatlabAlgorithmsNative.Segmentation.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
    </members>
</doc>
