<!--
   MainWindow.xaml
   Contains XAML definition for the WPF Divik client frontend.
   
   Copyright 2017 Michal Wolny, Grzegorz Mrukwa

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Window x:Class="Spectre.DivikWpfClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:validation="clr-namespace:Spectre.DivikWpfClient.Validation"
        xmlns:converters="clr-namespace:Spectre.Mvvm.Converters;assembly=Spectre.Mvvm"
        mc:Ignorable="d"
        Title="Spectre Divik"
        Height="687.612"
        Width="710.758"
        Background="#FF464646"
        DataContext="{StaticResource MainPageVm}">
    <Window.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:PercentageConverter x:Key="PercentageConverter"/>
        <Style x:Key="PromptErrorTextBox" TargetType="{x:Type TextBox}" xmlns:sys="clr-namespace:System;assembly=mscorlib">
            <Style.Resources>
                <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                    <VisualBrush.Visual>
                        <Label Content="Enter your input" Foreground="LightGray" />
                    </VisualBrush.Visual>
                </VisualBrush>
            </Style.Resources>
            <Style.Triggers>
                <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                    <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                </Trigger>
                <Trigger Property="Text" Value="{x:Null}">
                    <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="Background" Value="White" />
                </Trigger>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                              Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid Height="657" VerticalAlignment="Top" Margin="5,0">
        <Grid.RowDefinitions>
            <RowDefinition Height="50*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="35*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="20*"/>
            <RowDefinition Height="50*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="190"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        
        <!--Title-->
        <TextBlock x:Name="SpectreLabel" 
                   Grid.Column="0"
                   Grid.Row="0" 
                   Grid.ColumnSpan="2"
                   Text="Spectre Divik" 
                   TextAlignment="Center" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="30" 
                   Margin="0,9,0,7" 
                   FontSize="20"/>
        
        <!--Input path-->
        <TextBlock x:Name="InputPathLabel" 
                   Grid.Column="0"
                   Grid.Row="1"
                   Text="Input path:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Margin="0,4,0,3" 
                   Height="16"/>
        <TextBox x:Name="InputPathTextBox" 
                 Grid.Row="1"
                 Grid.Column="1"
                 Text="{Binding InputPath, Mode=TwoWay}" 
                 Margin="0,0,105,0"
                 Style="{StaticResource PromptErrorTextBox}"/>
        <Button Name="ChooseFileButton"
                Grid.Row="1"
                Grid.Column="1"
                Content="Choose file"
                HorizontalAlignment="Right"
                Margin="0,0,0,0"
                VerticalAlignment="Top"
                Width="100"
                Height="25"
                Command="{Binding ChooseFileButtonExecute}"/>
        
        <!--Sub-title for parameters-->
        <TextBlock x:Name="DivikParametersLabel" 
                   Grid.Column="1"
                   Grid.Row="2"
                   Text="Divik Parameters" 
                   TextAlignment="Center" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="22" 
                   Margin="0,9,0,7" 
                   FontSize="16"/>
        
        <!--Output path-->
        <TextBlock x:Name="OutputPathLabel" 
                   Grid.Column="0"
                   Grid.Row="3"
                   Text="Output path:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,5"/>
        <TextBox x:Name="OutputPathTextBox" 
                 Grid.Row="3"
                 Grid.Column="1"
                 Margin="0,0,105,0"
                 Text="{Binding OutputPath, Mode=TwoWay}"
                 Style="{StaticResource PromptErrorTextBox}"/>
        <Button Name="ChooseDirectoryButton"
                Grid.Row="3"
                Grid.Column="1"
                Content="Choose directory"
                HorizontalAlignment="Right"
                Margin="0,0,0,0"
                VerticalAlignment="Top"
                Width="100"
                Height="25"
                Command="{Binding ChooseOutputDirectoryCommand}"/>
        
        <!--Max K-->
        <TextBlock x:Name="MaxKLabel" 
                   Grid.Column="0"
                   Grid.Row="4"
                   Text="MaxK:" 
                   Foreground="White" 
                   VerticalAlignment="Center"
                   Height="16" 
                   Margin="0,6,0,4"/>
        <TextBox Name="MaxKNumberTextBox"
                 Grid.Row="4"
                 Grid.Column="1"
                 Style="{StaticResource PromptErrorTextBox}">
            <TextBox.Text>
                <Binding Path="MaxK" Mode="TwoWay">
                    <Binding.ValidationRules>
                        <validation:IntegerRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        
        <!--Max level-->
        <TextBlock x:Name="LevelLabel" 
                   Grid.Column="0"
                   Grid.Row="5"
                   Text="Level:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,6,0,5"/>
        <TextBox Name="LevelNumberTextBox"
                 Grid.Row="5"
                 Grid.Column="1"
                 Style="{StaticResource PromptErrorTextBox}">
            <TextBox.Text>
                <Binding Path="Level" Mode="TwoWay">
                    <Binding.ValidationRules>
                        <validation:IntegerRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        
        <!--Use levels-->
        <TextBlock x:Name="UsingLevelsLabel" 
                   Grid.Column="0"
                   Grid.Row="6"
                   Text="Using Levels:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,5,0,7"/>
        <CheckBox x:Name="UsingLevelsCheckbox"  
                  Grid.Column="1"
                  Grid.Row="6"
                  IsChecked="{Binding UsingLevels, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14" 
                  Margin="0,7">
            <CheckBox.Content>
                <TextBlock Text="If checked, level of recursion is used as stop condition" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Use amplitude filter-->
        <TextBlock x:Name="UsingAmplitudeFiltrationLabel" 
                   Grid.Column="0"
                   Grid.Row="7"
                   Text="Amplitude:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,5,0,6"/>
        <CheckBox x:Name="UsingAmplitudeFiltrationCheckbox"  
                  Grid.Column="1"
                  Grid.Row="7"
                  IsChecked="{Binding UsingAmplitudeFiltration, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14" 
                  Margin="0,7,0,6">
            <CheckBox.Content>
                <TextBlock Text="If checked, using amplitude filtration" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Use variance filter-->
        <TextBlock x:Name="UsingVarianceFiltrationLabel" 
                   Grid.Column="0"
                   Grid.Row="8"
                   Text="Variance:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,6,0,5"/>
        <CheckBox x:Name="UsingVarianceFiltrationCheckbox"  
                  Grid.Column="1"
                  Grid.Row="8"
                  IsChecked="{Binding UsingVarianceFiltration, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14" 
                  Margin="0,6,0,7">
            <CheckBox.Content>
                <TextBlock Text="If checked, using variance filtration" 
                           TextTrimming="CharacterEllipsis"
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Size percent-->
        <TextBlock x:Name="PercentSizeLimitLabel" 
                   Grid.Column="0"
                   Grid.Row="9"
                   Text="Percent size limit:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,5,0,6"/>
        <Grid Grid.Row="9"
                    Grid.Column="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBox Grid.Column="0"
                     x:Name="PercentSizeLimitTextBox"
                     Style="{StaticResource PromptErrorTextBox}">
                <TextBox.Text>
                    <Binding Path="Value"
                             ElementName="SizeSlider"
                         Mode="TwoWay" 
                         Converter="{StaticResource PercentageConverter}"
                         UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:PercentageRangeRule Min="0"
                                                            Max="100"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <Slider x:Name="SizeSlider"
                    Grid.Column="1"
                    Minimum="0"
                    Maximum="1"
                    SmallChange="0.0001"
                    Value="{Binding Path=PercentSizeLimit,
                                    Mode=TwoWay,
                                    UpdateSourceTrigger=PropertyChanged}"
                    IsSnapToTickEnabled="True"
                    TickFrequency="0.0001" />
        </Grid>
        
        <!--Feature preservation-->
        <TextBlock x:Name="FeaturePreservationLimitLabel"
                   Grid.Column="0"
                   Grid.Row="10"
                   Text="Feature preservation limit:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,6"/>
        <Grid Grid.Row="10"
              Grid.Column="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBox x:Name="FeaturePreservationLimitTextBox" 
                 Grid.Column="0"
                 Style="{StaticResource PromptErrorTextBox}">
                <TextBox.Text>
                    <Binding Path="Value"
                             ElementName="FeatureSlider"
                             Mode="TwoWay" 
                             Converter="{StaticResource PercentageConverter}"
                             UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:PercentageRangeRule Min="0"
                                                            Max="100"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <Slider x:Name="FeatureSlider"
                    Grid.Column="1"
                    Minimum="0"
                    Maximum="1"
                    SmallChange="0.0001"
                    Value="{Binding Path=FeaturePreservationLimit,
                                    Mode=TwoWay,
                                    UpdateSourceTrigger=PropertyChanged}"
                    IsSnapToTickEnabled="True"
                    TickFrequency="0.0001" />
        </Grid>


        <!--Metric-->
        <TextBlock x:Name="MetricLabel" 
                   Grid.Column="0"
                   Grid.Row="11"
                   Text="Metric:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,4,0,5"/>
        <ComboBox SelectedValue="{Binding Metric, Mode=TwoWay}"
                  Grid.Column="1"
                  Grid.Row="11" 
                  Name="MetricComboBox"
                  ItemsSource="{Binding Metrics}"/>
        
        <!--Partition plotting-->
        <TextBlock x:Name="PlottingPartitionsLabel" 
                   Grid.Column="0"
                   Grid.Row="12"
                   Text="Plotting partitions:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,7,0,6"/>
        <CheckBox x:Name="PlottingPartitionsCheckbox"  
                  Grid.Column="1"
                  Grid.Row="12"
                  IsChecked="{Binding PlottingPartitions, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="16" 
                  Margin="0,7,0,6">
            <CheckBox.Content>
                <TextBlock Text="If checked, partitions are plotted" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Recursive partition plotting-->
        <TextBlock x:Name="PlottingRecursivelyLabel" 
                   Grid.Column="0"
                   Grid.Row="13"
                   Text="Plotting recursively:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,6,0,5"/>
        <CheckBox x:Name="PlottingRecursivelyCheckbox"  
                  Grid.Column="1"
                  Grid.Row="13"
                  IsChecked="{Binding PlottingRecursively, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14" 
                  Margin="0,6,0,7">
            <CheckBox.Content>
                <TextBlock Text="If checked, partitions are plotted recursively" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Decomposition plotting-->
        <TextBlock x:Name="PlottingDecompositionLabel" 
                   Grid.Column="0"
                   Grid.Row="14"
                   Text="Plotting decomposition:" Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,5,0,6"/>
        <CheckBox x:Name="PlottingDecompositionCheckbox"  
                  Grid.Column="1"
                  Grid.Row="14"
                  IsChecked="{Binding PlottingDecomposition, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14" 
                  Margin="0,7,0,6">
            <CheckBox.Content>
                <TextBlock Text="If checked, decomposition plots are created" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Decomposition recursive plotting-->
        <TextBlock x:Name="PlottingDecompositionRecursivelyLabel" 
                   Grid.Column="0"
                   Grid.Row="15"
                   Text="Plotting decomposition recursively:"
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,4,0,5"/>
        <CheckBox x:Name="PlottingDecompositionRecursivelyCheckbox"  
                  Grid.Column="1"
                  Grid.Row="15"
                  IsChecked="{Binding PlottingDecompositionRecursively, Mode=TwoWay}" 
                  VerticalAlignment="Center"
                  Height="14"
                  Margin="0,6,0,5">
            <CheckBox.Content>
                <TextBlock Text="If checked, decomposition plots are created recursively" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--Max components for decomposition-->
        <TextBlock x:Name="MaxComponentsForDecompositionLabel" 
                   Grid.Column="0"
                   Grid.Row="16"
                   Text="Max decomposition components:" 
                   Foreground="White" 
                   VerticalAlignment="Center"
                   Height="16" 
                   Margin="0,5,0,6"/>
        <TextBox Grid.Row="16"
                 Grid.Column="1"
                 Name="MaxComponentsForDecompositionNumberTextBox"
                 Style="{StaticResource PromptErrorTextBox}">
            <TextBox.Text>
                <Binding Path="MaxComponentsForDecomposition" Mode="TwoWay">
                    <Binding.ValidationRules>
                        <validation:IntegerRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        
        <!--Cache path-->
        <TextBlock x:Name="CachePathLabel" 
                   Grid.Column="0"
                   Grid.Row="17"
                   Text="Cache path:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,7,0,5"/>
        <TextBox x:Name="CachePathTextBox" 
                 Grid.Row="17"
                 Grid.Column="1"
                 Margin="0,0,105,0"
                 Text="{Binding CachePath, Mode=TwoWay}"
                 Style="{StaticResource PromptErrorTextBox}">
        </TextBox>
        <Button Name="ChooseCacheDirectoryButton"
                Grid.Row="17"
                Grid.Column="1"
                Content="Choose directory"
                HorizontalAlignment="Right"
                Margin="0,0,0,0"
                VerticalAlignment="Top"
                Width="100"
                Height="25"
                Command="{Binding ChooseCacheDirectoryCommand}"/>
        
        <!--Enable cache-->
        <TextBlock x:Name="CachingLabel" 
                   Grid.Column="0"
                   Grid.Row="18"
                   Text="Caching:" Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" />
        <CheckBox x:Name="CachingCheckbox"  
                  Grid.Column="1"
                  Grid.Row="18"
                  IsChecked="{Binding Caching, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14">
            <CheckBox.Content>
                <TextBlock Text="If checked, partial results are stored on disk" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>
        
        <!--K-means max iters-->
        <TextBlock x:Name="KmeansMaxItersLabel" 
                   Grid.Column="0"
                   Grid.Row="19"
                   Text="Max iterations for K-means:" 
                   Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" 
                   Margin="0,6"/>
        <TextBox Grid.Row="19"
                 Grid.Column="1"
                 Name="KmeansMaxItersNumberTextBox"
                 Style="{StaticResource PromptErrorTextBox}">
            <TextBox.Text>
                <Binding Path="KmeansMaxIters" Mode="TwoWay">
                    <Binding.ValidationRules>
                        <validation:IntegerRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <!--Pretty print-->
        <TextBlock x:Name="PrettyPrintLabel" 
                   Grid.Column="0"
                   Grid.Row="20"
                   Text="Pretty print:" Foreground="White" 
                   VerticalAlignment="Center" 
                   Height="16" />
        <CheckBox x:Name="PrettyPrintCheckbox"  
                  Grid.Column="1"
                  Grid.Row="20"
                  IsChecked="{Binding PrettyPrint, Mode=TwoWay}" 
                  VerticalAlignment="Center" 
                  Height="14">
            <CheckBox.Content>
                <TextBlock Text="If checked, json results are printed with indentation" 
                           TextTrimming="CharacterEllipsis" 
                           Foreground="White"></TextBlock>
            </CheckBox.Content>
        </CheckBox>

        <!--Progress bar-->
        <ProgressBar Name="DivikProgress"
                     Grid.Row="22"
                     Grid.ColumnSpan="2"
                     Height="25" 
                     Foreground="#FF7EFB95"
                     IsIndeterminate="True"
                     Visibility="{Binding IsProgressBarVisible, Converter={StaticResource BoolToVisibilityConverter}}" />
        <TextBlock Text="{Binding ProgressBarLabel}" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center" 
                   Name="DivikProgressLabel"
                   Grid.Row="21"
                   Grid.ColumnSpan="2"
                   Foreground="Gray"/>
        
        <!--Start button-->
        <Button Name="StartDivikButton"
                Grid.Row="23"
                Grid.Column="1"
                Content="{Binding StartDivikLabel}"
                HorizontalAlignment="Right"
                Margin="0,15,50,0"
                VerticalAlignment="Top"
                Width="100"
                Height="30"
                Command="{Binding StartDivikButtonExecute}"/>
    </Grid>
</Window>
